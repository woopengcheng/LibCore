// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "accsrv.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pwngs {
namespace protocol {
namespace accsrv {

namespace {

const ::google::protobuf::Descriptor* CSLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCLoginResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCLoginResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_accsrv_2eproto() {
  protobuf_AddDesc_accsrv_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "accsrv.proto");
  GOOGLE_CHECK(file != NULL);
  CSLogin_descriptor_ = file->message_type(0);
  static const int CSLogin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLogin, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLogin, pswd_),
  };
  CSLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSLogin_descriptor_,
      CSLogin::default_instance_,
      CSLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSLogin));
  SCLoginResult_descriptor_ = file->message_type(1);
  static const int SCLoginResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCLoginResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCLoginResult, error_),
  };
  SCLoginResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCLoginResult_descriptor_,
      SCLoginResult::default_instance_,
      SCLoginResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCLoginResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCLoginResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCLoginResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_accsrv_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSLogin_descriptor_, &CSLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCLoginResult_descriptor_, &SCLoginResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_accsrv_2eproto() {
  delete CSLogin::default_instance_;
  delete CSLogin_reflection_;
  delete SCLoginResult::default_instance_;
  delete SCLoginResult_reflection_;
}

void protobuf_AddDesc_accsrv_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pwngs::protobuf_AddDesc_options_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014accsrv.proto\022\025pwngs.protocol.accsrv\032\ro"
    "ptions.proto\"+\n\007CSLogin\022\014\n\004name\030\001 \002(\t\022\014\n"
    "\004pswd\030\002 \002(\t:\004\210\303\032\013\"4\n\rSCLoginResult\022\016\n\006re"
    "sult\030\001 \002(\005\022\r\n\005error\030\002 \001(\t:\004\210\303\032\014", 151);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "accsrv.proto", &protobuf_RegisterTypes);
  CSLogin::default_instance_ = new CSLogin();
  SCLoginResult::default_instance_ = new SCLoginResult();
  CSLogin::default_instance_->InitAsDefaultInstance();
  SCLoginResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_accsrv_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_accsrv_2eproto {
  StaticDescriptorInitializer_accsrv_2eproto() {
    protobuf_AddDesc_accsrv_2eproto();
  }
} static_descriptor_initializer_accsrv_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CSLogin::kNameFieldNumber;
const int CSLogin::kPswdFieldNumber;
#endif  // !_MSC_VER

CSLogin::CSLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSLogin::InitAsDefaultInstance() {
}

CSLogin::CSLogin(const CSLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSLogin::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSLogin::~CSLogin() {
  SharedDtor();
}

void CSLogin::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (pswd_ != &::google::protobuf::internal::kEmptyString) {
    delete pswd_;
  }
  if (this != default_instance_) {
  }
}

void CSLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSLogin_descriptor_;
}

const CSLogin& CSLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accsrv_2eproto();  return *default_instance_;
}

CSLogin* CSLogin::default_instance_ = NULL;

CSLogin* CSLogin::New() const {
  return new CSLogin;
}

void CSLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_pswd()) {
      if (pswd_ != &::google::protobuf::internal::kEmptyString) {
        pswd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          name_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pswd;
        break;
      }
      
      // required string pswd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pswd()));
          pswd_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pswd().data(), this->pswd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    std::string tmp = pwutils::utf8_from_mbs(name());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, tmp, output);
  }
  
  // required string pswd = 2;
  if (has_pswd()) {
    std::string tmp = pwutils::utf8_from_mbs(pswd());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, tmp, output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    std::string tmp = pwutils::utf8_from_mbs(name());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, tmp, target);
  }
  
  // required string pswd = 2;
  if (has_pswd()) {
    std::string tmp = pwutils::utf8_from_mbs(pswd());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, tmp, target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      std::string name_tmp = pwutils::utf8_from_mbs(name());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          name_tmp);
    }
    
    // required string pswd = 2;
    if (has_pswd()) {
      std::string pswd_tmp = pwutils::utf8_from_mbs(pswd());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          pswd_tmp);
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSLogin::MergeFrom(const CSLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pswd()) {
      set_pswd(from.pswd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLogin::CopyFrom(const CSLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CSLogin::Swap(CSLogin* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(pswd_, other->pswd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSLogin_descriptor_;
  metadata.reflection = CSLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCLoginResult::kResultFieldNumber;
const int SCLoginResult::kErrorFieldNumber;
#endif  // !_MSC_VER

SCLoginResult::SCLoginResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCLoginResult::InitAsDefaultInstance() {
}

SCLoginResult::SCLoginResult(const SCLoginResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCLoginResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCLoginResult::~SCLoginResult() {
  SharedDtor();
}

void SCLoginResult::SharedDtor() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void SCLoginResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCLoginResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCLoginResult_descriptor_;
}

const SCLoginResult& SCLoginResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accsrv_2eproto();  return *default_instance_;
}

SCLoginResult* SCLoginResult::default_instance_ = NULL;

SCLoginResult* SCLoginResult::New() const {
  return new SCLoginResult;
}

void SCLoginResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCLoginResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }
      
      // optional string error = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          error_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCLoginResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  // optional string error = 2;
  if (has_error()) {
    std::string tmp = pwutils::utf8_from_mbs(error());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, tmp, output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCLoginResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  // optional string error = 2;
  if (has_error()) {
    std::string tmp = pwutils::utf8_from_mbs(error());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, tmp, target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCLoginResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional string error = 2;
    if (has_error()) {
      std::string error_tmp = pwutils::utf8_from_mbs(error());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          error_tmp);
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCLoginResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCLoginResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCLoginResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCLoginResult::MergeFrom(const SCLoginResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCLoginResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLoginResult::CopyFrom(const SCLoginResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLoginResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SCLoginResult::Swap(SCLoginResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCLoginResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCLoginResult_descriptor_;
  metadata.reflection = SCLoginResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace accsrv
}  // namespace protocol
}  // namespace pwngs

// @@protoc_insertion_point(global_scope)
