<?xml version="1.0" encoding="UTF-8"?>


<!--
	使用方法:RPCMsgs包含了所有的RPC的消息.
		1.默认参数:
			如果需要增加新的类型.这个新类型需要包含默认参数.默认参数需要在<DefaultParams />中声明类型和值.类型只能为1个单字.不能出现const char * 或者Msg::Chunk这种.
		2.RpcNamespace:
			Rpc要转发的服务器列表.需要给出服务器列表的名字和路径.这也是RPC的生成路径.
		3.RPCS:
			这里是所有的RPC对于RPC而言可以传递声明的参数类型也可以传递RpcData.RpcData的参数类型需要在默认参数中声明.且需要名字就可以了.
		4.Rpc:
			对于一个Rpc而言.需要知道这个Rpc的名字.在哪个类里面使用.客户端(远程调用)名字.服务器名字.代理服务器名字.代理服务器没有则为空.但必须有客户端和服务器.
		5.call和Return:
			call为一个RPC的发起调用.或者超时时调用的函数.return为RPC从服务器返回的多个值.
-->


<RpcMsgs>		
	<DefaultParams INT32='0' UNT32='0'/>
	<DefaultParams INT16='0' UNT16='0'/>

	<RpcServerName serverName="Server" outputPath="./server/"/>
	<RpcServerName serverName="Client" outputPath="./client/"/>
	<RpcServerName serverName="Proxy" outputPath="./proxy/"/>

	<Rpcs> 
		<RpcData name="UserLogin">
			<Param type="INT32" name="userid" default="0"/>
			<Param type="INT32" name="localid" default="0"/> 
		</RpcData>

		<Rpc name="TestObject" class="TestObject" include="TestObject.h" client="Client" proxy="Proxy" server="Server">
			<Call >
				<Param name="userid" type="INT32" default="0"/>
				<Param name="localid" type="INT32" default=""/>
			</Call>

			<Return>
				<Param name="userid" type="INT32" default="0"/>
				<Param name="localid" type="INT32" default="0"/>
			</Return>
		</Rpc>
		
		<Rpc name="TestObject1" class="TestObject" include="TestObject1.h" client="Client" proxy="Proxy" server="Server">
			<Call >
				<Param name="userid" type="INT32" default="0"/>
				<Param name="localid" type="INT32" default=""/>
			</Call>

			<Return>
				<Param name="userid" type="INT32" default="0"/>
				<Param name="localid" type="INT32" default="0"/>
			</Return>
		</Rpc>
	</Rpcs>
</RpcMsgs>
