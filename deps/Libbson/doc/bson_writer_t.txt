bson_writer_t(3)
================


NAME
----

bson_writer_begin - begin writing a new document to the underlying buffer


SYNOPSIS
--------

[source, c]
-----------------------
#include <bson.h>

typedef struct _bson_writer_t bson_writer_t;

bson_writer_t *
bson_writer_new (uint8_t         **buf,
                 size_t           *buflen,
                 size_t            offset,
                 bson_realloc_func realloc_func,
                 void             *realloc_func_ctx);

void
bson_writer_destroy (bson_writer_t *writer);

size_t
bson_writer_get_length (bson_writer_t *writer);

bool
bson_writer_begin (bson_writer_t *writer,
                   bson_t       **bson);

void
bson_writer_end (bson_writer_t *writer);

void
bson_writer_rollback (bson_writer_t *writer);
-----------------------


DESCRIPTION
-----------

bson_writer_t
~~~~~~~~~~~~~

The _bson_writer_t_ structure is a helper for writing a series of BSON
documents to a single _malloc()_ buffer. You can provide a _realloc()_ style
function to grow the buffer as you go.

This is useful if you want to build a series of BSON documents right into the
target buffer for an outgoing packet. The offset parameter allows you to start
at an offset of the target buffer.


bson_writer_new()
~~~~~~~~~~~~~~~~~

Creates a new instance of _bson_writer_t_ using the _buffer_, _length_,
_offset_, and _realloc()_ function supplied.

The caller is expected to clean up the structure when finished using
_bson_writer_destroy()_.


bson_writer_destroy()
~~~~~~~~~~~~~~~~~~~~~

Cleanup after _writer_ and release any allocated memory. Note that the buffer
supplied to _bson_writer_new()_ is *NOT* freed from this method.  The caller
is responsible for that.


bson_writer_begin()
~~~~~~~~~~~~~~~~~~~

Begins writing a new document. The caller may use the bson structure to write
out a new BSON document. When completed, the caller must call either
_bson_writer_end()_ or _bson_writer_rollback()_.


bson_writer_end()
~~~~~~~~~~~~~~~~~

Complete writing of a _bson_writer_t_ to the buffer supplied.


bson_writer_rollback()
~~~~~~~~~~~~~~~~~~~~~~

Abort the appending of the current bson_t to the memory region managed by
_writer_. This is useful if you detected that you went past a particular
memory limit. For example, MongoDB has 48MB message limits.


bson_writer_get_length()
~~~~~~~~~~~~~~~~~~~~~~~~

Fetches the current length of the content written by the buffer (including the
initial offset). This includes a partly written document currently being
written.

This is useful if you want to check to see if you've passed a given memory
boundry that cannot be sent in a packet. See _bson_writer_rollback()_ to abort
the current document being written.


RETURN VALUE
------------

_bson_writer_get_length()_ returns the length of the underlying buffer.


ERRORS
------

No errors are defined.


SEE ALSO
--------

linkbson:bson_writer_new[3]
linkbson:bson_writer_destroy[3]
linkbson:bson_writer_get_length[3]
linkbson:bson_writer_begin[3]
linkbson:bson_writer_end[3]
linkbson:bson_writer_rollback[3]


AUTHORS
-------

This page was written by MongoDB, Inc.
